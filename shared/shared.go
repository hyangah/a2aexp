// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package shared

import (
	"encoding/json"

	"github.com/hyangah/a2a-exp/internal/apijson"
	"github.com/hyangah/a2a-exp/packages/param"
	"github.com/hyangah/a2a-exp/packages/respjson"
	"github.com/hyangah/a2a-exp/shared/constant"
)

// aliased to make [param.APIUnion] private when embedding
type paramUnion = param.APIUnion

// aliased to make [param.APIObject] private when embedding
type paramObj = param.APIObject

// Represents a file, data structure, or other resource generated by an agent
// during a task.
type Artifact struct {
	// A unique identifier (e.g. UUID) for the artifact within the scope of the task.
	ArtifactID string `json:"artifactId,required"`
	// An array of content parts that make up the artifact.
	Parts []PartUnion `json:"parts,required"`
	// An optional, human-readable description of the artifact.
	Description string `json:"description"`
	// The URIs of extensions that are relevant to this artifact.
	Extensions []string `json:"extensions"`
	// Optional metadata for extensions. The key is an extension-specific identifier.
	Metadata map[string]any `json:"metadata"`
	// An optional, human-readable name for the artifact.
	Name string `json:"name"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ArtifactID  respjson.Field
		Parts       respjson.Field
		Description respjson.Field
		Extensions  respjson.Field
		Metadata    respjson.Field
		Name        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r Artifact) RawJSON() string { return r.JSON.raw }
func (r *Artifact) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a single message in the conversation between a user and an agent.
type Message struct {
	// The type of this object, used as a discriminator. Always 'message' for a
	// Message.
	Kind constant.Message `json:"kind,required"`
	// A unique identifier for the message, typically a UUID, generated by the sender.
	MessageID string `json:"messageId,required"`
	// An array of content parts that form the message body. A message can be composed
	// of multiple parts of different types (e.g., text and files).
	Parts []PartUnion `json:"parts,required"`
	// Identifies the sender of the message. `user` for the client, `agent` for the
	// service.
	//
	// Any of "agent", "user".
	Role MessageRole `json:"role,required"`
	// The context ID for this message, used to group related interactions.
	ContextID string `json:"contextId"`
	// The URIs of extensions that are relevant to this message.
	Extensions []string `json:"extensions"`
	// Optional metadata for extensions. The key is an extension-specific identifier.
	Metadata map[string]any `json:"metadata"`
	// A list of other task IDs that this message references for additional context.
	ReferenceTaskIDs []string `json:"referenceTaskIds"`
	// The ID of the task this message is part of. Can be omitted for the first message
	// of a new task.
	TaskID string `json:"taskId"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Kind             respjson.Field
		MessageID        respjson.Field
		Parts            respjson.Field
		Role             respjson.Field
		ContextID        respjson.Field
		Extensions       respjson.Field
		Metadata         respjson.Field
		ReferenceTaskIDs respjson.Field
		TaskID           respjson.Field
		ExtraFields      map[string]respjson.Field
		raw              string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r Message) RawJSON() string { return r.JSON.raw }
func (r *Message) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// ToParam converts this Message to a MessageParam.
//
// Warning: the fields of the param type will not be present. ToParam should only
// be used at the last possible moment before sending a request. Test for this with
// MessageParam.Overrides()
func (r Message) ToParam() MessageParam {
	return param.Override[MessageParam](json.RawMessage(r.RawJSON()))
}

// Identifies the sender of the message. `user` for the client, `agent` for the
// service.
type MessageRole string

const (
	MessageRoleAgent MessageRole = "agent"
	MessageRoleUser  MessageRole = "user"
)

// Represents a single message in the conversation between a user and an agent.
//
// The properties Kind, MessageID, Parts, Role are required.
type MessageParam struct {
	// A unique identifier for the message, typically a UUID, generated by the sender.
	MessageID string `json:"messageId,required"`
	// An array of content parts that form the message body. A message can be composed
	// of multiple parts of different types (e.g., text and files).
	Parts []PartUnionParam `json:"parts,omitzero,required"`
	// Identifies the sender of the message. `user` for the client, `agent` for the
	// service.
	//
	// Any of "agent", "user".
	Role MessageRole `json:"role,omitzero,required"`
	// The context ID for this message, used to group related interactions.
	ContextID param.Opt[string] `json:"contextId,omitzero"`
	// The ID of the task this message is part of. Can be omitted for the first message
	// of a new task.
	TaskID param.Opt[string] `json:"taskId,omitzero"`
	// The URIs of extensions that are relevant to this message.
	Extensions []string `json:"extensions,omitzero"`
	// Optional metadata for extensions. The key is an extension-specific identifier.
	Metadata map[string]any `json:"metadata,omitzero"`
	// A list of other task IDs that this message references for additional context.
	ReferenceTaskIDs []string `json:"referenceTaskIds,omitzero"`
	// The type of this object, used as a discriminator. Always 'message' for a
	// Message.
	//
	// This field can be elided, and will marshal its zero value as "message".
	Kind constant.Message `json:"kind,required"`
	paramObj
}

func (r MessageParam) MarshalJSON() (data []byte, err error) {
	type shadow MessageParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *MessageParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Defines the parameters for a request to send a message to an agent. This can be
// used to create a new task, continue an existing one, or restart a task.
//
// The property Message is required.
type MessageSendParams struct {
	// The message object being sent to the agent.
	Message MessageParam `json:"message,omitzero,required"`
	// Optional configuration for the send request.
	Configuration MessageSendParamsConfiguration `json:"configuration,omitzero"`
	// Optional metadata for extensions.
	Metadata map[string]any `json:"metadata,omitzero"`
	paramObj
}

func (r MessageSendParams) MarshalJSON() (data []byte, err error) {
	type shadow MessageSendParams
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *MessageSendParams) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Optional configuration for the send request.
type MessageSendParamsConfiguration struct {
	// If true, the client will wait for the task to complete. The server may reject
	// this if the task is long-running.
	Blocking param.Opt[bool] `json:"blocking,omitzero"`
	// The number of most recent messages from the task's history to retrieve in the
	// response.
	HistoryLength param.Opt[int64] `json:"historyLength,omitzero"`
	// A list of output MIME types the client is prepared to accept in the response.
	AcceptedOutputModes []string `json:"acceptedOutputModes,omitzero"`
	// Configuration for the agent to send push notifications for updates after the
	// initial response.
	PushNotificationConfig PushNotificationConfigParam `json:"pushNotificationConfig,omitzero"`
	paramObj
}

func (r MessageSendParamsConfiguration) MarshalJSON() (data []byte, err error) {
	type shadow MessageSendParamsConfiguration
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *MessageSendParamsConfiguration) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// PartUnion contains all possible properties and values from [PartTextPart],
// [PartFilePart], [PartDataPart].
//
// Use the methods beginning with 'As' to cast the union to one of its variants.
type PartUnion struct {
	Kind string `json:"kind"`
	// This field is from variant [PartTextPart].
	Text     string `json:"text"`
	Metadata any    `json:"metadata"`
	// This field is from variant [PartFilePart].
	File PartFilePartFileUnion `json:"file"`
	// This field is from variant [PartDataPart].
	Data map[string]any `json:"data"`
	JSON struct {
		Kind     respjson.Field
		Text     respjson.Field
		Metadata respjson.Field
		File     respjson.Field
		Data     respjson.Field
		raw      string
	} `json:"-"`
}

func (u PartUnion) AsPartTextPart() (v PartTextPart) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u PartUnion) AsPartFilePart() (v PartFilePart) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u PartUnion) AsPartDataPart() (v PartDataPart) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

// Returns the unmodified JSON received from the API
func (u PartUnion) RawJSON() string { return u.JSON.raw }

func (r *PartUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// ToParam converts this PartUnion to a PartUnionParam.
//
// Warning: the fields of the param type will not be present. ToParam should only
// be used at the last possible moment before sending a request. Test for this with
// PartUnionParam.Overrides()
func (r PartUnion) ToParam() PartUnionParam {
	return param.Override[PartUnionParam](json.RawMessage(r.RawJSON()))
}

// Represents a text segment within a message or artifact.
type PartTextPart struct {
	// The type of this part, used as a discriminator. Always 'text'.
	Kind constant.Text `json:"kind,required"`
	// The string content of the text part.
	Text string `json:"text,required"`
	// Optional metadata associated with this part.
	Metadata map[string]any `json:"metadata"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Kind        respjson.Field
		Text        respjson.Field
		Metadata    respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartTextPart) RawJSON() string { return r.JSON.raw }
func (r *PartTextPart) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a file segment within a message or artifact. The file content can be
// provided either directly as bytes or as a URI.
type PartFilePart struct {
	// The file content, represented as either a URI or as base64-encoded bytes.
	File PartFilePartFileUnion `json:"file,required"`
	// The type of this part, used as a discriminator. Always 'file'.
	Kind constant.File `json:"kind,required"`
	// Optional metadata associated with this part.
	Metadata map[string]any `json:"metadata"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		File        respjson.Field
		Kind        respjson.Field
		Metadata    respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartFilePart) RawJSON() string { return r.JSON.raw }
func (r *PartFilePart) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// PartFilePartFileUnion contains all possible properties and values from
// [PartFilePartFileFileWithBytes], [PartFilePartFileFileWithUri].
//
// Use the methods beginning with 'As' to cast the union to one of its variants.
type PartFilePartFileUnion struct {
	// This field is from variant [PartFilePartFileFileWithBytes].
	Bytes    string `json:"bytes"`
	MimeType string `json:"mimeType"`
	Name     string `json:"name"`
	// This field is from variant [PartFilePartFileFileWithUri].
	Uri  string `json:"uri"`
	JSON struct {
		Bytes    respjson.Field
		MimeType respjson.Field
		Name     respjson.Field
		Uri      respjson.Field
		raw      string
	} `json:"-"`
}

func (u PartFilePartFileUnion) AsPartFilePartFileFileWithBytes() (v PartFilePartFileFileWithBytes) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

func (u PartFilePartFileUnion) AsPartFilePartFileFileWithUri() (v PartFilePartFileFileWithUri) {
	apijson.UnmarshalRoot(json.RawMessage(u.JSON.raw), &v)
	return
}

// Returns the unmodified JSON received from the API
func (u PartFilePartFileUnion) RawJSON() string { return u.JSON.raw }

func (r *PartFilePartFileUnion) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a file with its content provided directly as a base64-encoded string.
type PartFilePartFileFileWithBytes struct {
	// The base64-encoded content of the file.
	Bytes string `json:"bytes,required"`
	// The MIME type of the file (e.g., "application/pdf").
	MimeType string `json:"mimeType"`
	// An optional name for the file (e.g., "document.pdf").
	Name string `json:"name"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Bytes       respjson.Field
		MimeType    respjson.Field
		Name        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartFilePartFileFileWithBytes) RawJSON() string { return r.JSON.raw }
func (r *PartFilePartFileFileWithBytes) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a file with its content located at a specific URI.
type PartFilePartFileFileWithUri struct {
	// A URL pointing to the file's content.
	Uri string `json:"uri,required"`
	// The MIME type of the file (e.g., "application/pdf").
	MimeType string `json:"mimeType"`
	// An optional name for the file (e.g., "document.pdf").
	Name string `json:"name"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Uri         respjson.Field
		MimeType    respjson.Field
		Name        respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartFilePartFileFileWithUri) RawJSON() string { return r.JSON.raw }
func (r *PartFilePartFileFileWithUri) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a structured data segment (e.g., JSON) within a message or artifact.
type PartDataPart struct {
	// The structured data content.
	Data map[string]any `json:"data,required"`
	// The type of this part, used as a discriminator. Always 'data'.
	Kind constant.Data `json:"kind,required"`
	// Optional metadata associated with this part.
	Metadata map[string]any `json:"metadata"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Data        respjson.Field
		Kind        respjson.Field
		Metadata    respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PartDataPart) RawJSON() string { return r.JSON.raw }
func (r *PartDataPart) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

func PartParamOfPartTextPart(text string) PartUnionParam {
	var variant PartTextPartParam
	variant.Text = text
	return PartUnionParam{OfPartTextPart: &variant}
}

func PartParamOfPartFilePart[
	T PartFilePartFileFileWithBytesParam | PartFilePartFileFileWithUriParam,
](file T) PartUnionParam {
	var variant PartFilePartParam
	switch v := any(file).(type) {
	case PartFilePartFileFileWithBytesParam:
		variant.File.OfPartFilePartFileFileWithBytes = &v
	case PartFilePartFileFileWithUriParam:
		variant.File.OfPartFilePartFileFileWithUri = &v
	}
	return PartUnionParam{OfPartFilePart: &variant}
}

func PartParamOfPartDataPart(data map[string]any) PartUnionParam {
	var variant PartDataPartParam
	variant.Data = data
	return PartUnionParam{OfPartDataPart: &variant}
}

// Only one field can be non-zero.
//
// Use [param.IsOmitted] to confirm if a field is set.
type PartUnionParam struct {
	OfPartTextPart *PartTextPartParam `json:",omitzero,inline"`
	OfPartFilePart *PartFilePartParam `json:",omitzero,inline"`
	OfPartDataPart *PartDataPartParam `json:",omitzero,inline"`
	paramUnion
}

func (u PartUnionParam) MarshalJSON() ([]byte, error) {
	return param.MarshalUnion(u, u.OfPartTextPart, u.OfPartFilePart, u.OfPartDataPart)
}
func (u *PartUnionParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, u)
}

func (u *PartUnionParam) asAny() any {
	if !param.IsOmitted(u.OfPartTextPart) {
		return u.OfPartTextPart
	} else if !param.IsOmitted(u.OfPartFilePart) {
		return u.OfPartFilePart
	} else if !param.IsOmitted(u.OfPartDataPart) {
		return u.OfPartDataPart
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartUnionParam) GetText() *string {
	if vt := u.OfPartTextPart; vt != nil {
		return &vt.Text
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartUnionParam) GetFile() *PartFilePartFileUnionParam {
	if vt := u.OfPartFilePart; vt != nil {
		return &vt.File
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartUnionParam) GetData() map[string]any {
	if vt := u.OfPartDataPart; vt != nil {
		return vt.Data
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartUnionParam) GetKind() *string {
	if vt := u.OfPartTextPart; vt != nil {
		return (*string)(&vt.Kind)
	} else if vt := u.OfPartFilePart; vt != nil {
		return (*string)(&vt.Kind)
	} else if vt := u.OfPartDataPart; vt != nil {
		return (*string)(&vt.Kind)
	}
	return nil
}

// Returns a pointer to the underlying variant's Metadata property, if present.
func (u PartUnionParam) GetMetadata() map[string]any {
	if vt := u.OfPartTextPart; vt != nil {
		return vt.Metadata
	} else if vt := u.OfPartFilePart; vt != nil {
		return vt.Metadata
	} else if vt := u.OfPartDataPart; vt != nil {
		return vt.Metadata
	}
	return nil
}

// Represents a text segment within a message or artifact.
//
// The properties Kind, Text are required.
type PartTextPartParam struct {
	// The string content of the text part.
	Text string `json:"text,required"`
	// Optional metadata associated with this part.
	Metadata map[string]any `json:"metadata,omitzero"`
	// The type of this part, used as a discriminator. Always 'text'.
	//
	// This field can be elided, and will marshal its zero value as "text".
	Kind constant.Text `json:"kind,required"`
	paramObj
}

func (r PartTextPartParam) MarshalJSON() (data []byte, err error) {
	type shadow PartTextPartParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PartTextPartParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a file segment within a message or artifact. The file content can be
// provided either directly as bytes or as a URI.
//
// The properties File, Kind are required.
type PartFilePartParam struct {
	// The file content, represented as either a URI or as base64-encoded bytes.
	File PartFilePartFileUnionParam `json:"file,omitzero,required"`
	// Optional metadata associated with this part.
	Metadata map[string]any `json:"metadata,omitzero"`
	// The type of this part, used as a discriminator. Always 'file'.
	//
	// This field can be elided, and will marshal its zero value as "file".
	Kind constant.File `json:"kind,required"`
	paramObj
}

func (r PartFilePartParam) MarshalJSON() (data []byte, err error) {
	type shadow PartFilePartParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PartFilePartParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Only one field can be non-zero.
//
// Use [param.IsOmitted] to confirm if a field is set.
type PartFilePartFileUnionParam struct {
	OfPartFilePartFileFileWithBytes *PartFilePartFileFileWithBytesParam `json:",omitzero,inline"`
	OfPartFilePartFileFileWithUri   *PartFilePartFileFileWithUriParam   `json:",omitzero,inline"`
	paramUnion
}

func (u PartFilePartFileUnionParam) MarshalJSON() ([]byte, error) {
	return param.MarshalUnion(u, u.OfPartFilePartFileFileWithBytes, u.OfPartFilePartFileFileWithUri)
}
func (u *PartFilePartFileUnionParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, u)
}

func (u *PartFilePartFileUnionParam) asAny() any {
	if !param.IsOmitted(u.OfPartFilePartFileFileWithBytes) {
		return u.OfPartFilePartFileFileWithBytes
	} else if !param.IsOmitted(u.OfPartFilePartFileFileWithUri) {
		return u.OfPartFilePartFileFileWithUri
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartFilePartFileUnionParam) GetBytes() *string {
	if vt := u.OfPartFilePartFileFileWithBytes; vt != nil {
		return &vt.Bytes
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartFilePartFileUnionParam) GetUri() *string {
	if vt := u.OfPartFilePartFileFileWithUri; vt != nil {
		return &vt.Uri
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartFilePartFileUnionParam) GetMimeType() *string {
	if vt := u.OfPartFilePartFileFileWithBytes; vt != nil && vt.MimeType.Valid() {
		return &vt.MimeType.Value
	} else if vt := u.OfPartFilePartFileFileWithUri; vt != nil && vt.MimeType.Valid() {
		return &vt.MimeType.Value
	}
	return nil
}

// Returns a pointer to the underlying variant's property, if present.
func (u PartFilePartFileUnionParam) GetName() *string {
	if vt := u.OfPartFilePartFileFileWithBytes; vt != nil && vt.Name.Valid() {
		return &vt.Name.Value
	} else if vt := u.OfPartFilePartFileFileWithUri; vt != nil && vt.Name.Valid() {
		return &vt.Name.Value
	}
	return nil
}

// Represents a file with its content provided directly as a base64-encoded string.
//
// The property Bytes is required.
type PartFilePartFileFileWithBytesParam struct {
	// The base64-encoded content of the file.
	Bytes string `json:"bytes,required"`
	// The MIME type of the file (e.g., "application/pdf").
	MimeType param.Opt[string] `json:"mimeType,omitzero"`
	// An optional name for the file (e.g., "document.pdf").
	Name param.Opt[string] `json:"name,omitzero"`
	paramObj
}

func (r PartFilePartFileFileWithBytesParam) MarshalJSON() (data []byte, err error) {
	type shadow PartFilePartFileFileWithBytesParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PartFilePartFileFileWithBytesParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a file with its content located at a specific URI.
//
// The property Uri is required.
type PartFilePartFileFileWithUriParam struct {
	// A URL pointing to the file's content.
	Uri string `json:"uri,required"`
	// The MIME type of the file (e.g., "application/pdf").
	MimeType param.Opt[string] `json:"mimeType,omitzero"`
	// An optional name for the file (e.g., "document.pdf").
	Name param.Opt[string] `json:"name,omitzero"`
	paramObj
}

func (r PartFilePartFileFileWithUriParam) MarshalJSON() (data []byte, err error) {
	type shadow PartFilePartFileFileWithUriParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PartFilePartFileFileWithUriParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a structured data segment (e.g., JSON) within a message or artifact.
//
// The properties Data, Kind are required.
type PartDataPartParam struct {
	// The structured data content.
	Data map[string]any `json:"data,omitzero,required"`
	// Optional metadata associated with this part.
	Metadata map[string]any `json:"metadata,omitzero"`
	// The type of this part, used as a discriminator. Always 'data'.
	//
	// This field can be elided, and will marshal its zero value as "data".
	Kind constant.Data `json:"kind,required"`
	paramObj
}

func (r PartDataPartParam) MarshalJSON() (data []byte, err error) {
	type shadow PartDataPartParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PartDataPartParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Defines the configuration for setting up push notifications for task updates.
type PushNotificationConfig struct {
	// The callback URL where the agent should send push notifications.
	URL string `json:"url,required"`
	// A unique identifier (e.g. UUID) for the push notification configuration, set by
	// the client to support multiple notification callbacks.
	ID string `json:"id"`
	// A unique token for this task or session to validate incoming push notifications.
	Token string `json:"token"`
	// Optional authentication details for the agent to use when calling the
	// notification URL.
	Authentication PushNotificationConfigAuthentication `json:"authentication"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		URL            respjson.Field
		ID             respjson.Field
		Token          respjson.Field
		Authentication respjson.Field
		ExtraFields    map[string]respjson.Field
		raw            string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PushNotificationConfig) RawJSON() string { return r.JSON.raw }
func (r *PushNotificationConfig) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// ToParam converts this PushNotificationConfig to a PushNotificationConfigParam.
//
// Warning: the fields of the param type will not be present. ToParam should only
// be used at the last possible moment before sending a request. Test for this with
// PushNotificationConfigParam.Overrides()
func (r PushNotificationConfig) ToParam() PushNotificationConfigParam {
	return param.Override[PushNotificationConfigParam](json.RawMessage(r.RawJSON()))
}

// Optional authentication details for the agent to use when calling the
// notification URL.
type PushNotificationConfigAuthentication struct {
	// A list of supported authentication schemes (e.g., 'Basic', 'Bearer').
	Schemes []string `json:"schemes,required"`
	// Optional credentials required by the push notification endpoint.
	Credentials string `json:"credentials"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		Schemes     respjson.Field
		Credentials respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r PushNotificationConfigAuthentication) RawJSON() string { return r.JSON.raw }
func (r *PushNotificationConfigAuthentication) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Defines the configuration for setting up push notifications for task updates.
//
// The property URL is required.
type PushNotificationConfigParam struct {
	// The callback URL where the agent should send push notifications.
	URL string `json:"url,required"`
	// A unique identifier (e.g. UUID) for the push notification configuration, set by
	// the client to support multiple notification callbacks.
	ID param.Opt[string] `json:"id,omitzero"`
	// A unique token for this task or session to validate incoming push notifications.
	Token param.Opt[string] `json:"token,omitzero"`
	// Optional authentication details for the agent to use when calling the
	// notification URL.
	Authentication PushNotificationConfigAuthenticationParam `json:"authentication,omitzero"`
	paramObj
}

func (r PushNotificationConfigParam) MarshalJSON() (data []byte, err error) {
	type shadow PushNotificationConfigParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PushNotificationConfigParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Optional authentication details for the agent to use when calling the
// notification URL.
//
// The property Schemes is required.
type PushNotificationConfigAuthenticationParam struct {
	// A list of supported authentication schemes (e.g., 'Basic', 'Bearer').
	Schemes []string `json:"schemes,omitzero,required"`
	// Optional credentials required by the push notification endpoint.
	Credentials param.Opt[string] `json:"credentials,omitzero"`
	paramObj
}

func (r PushNotificationConfigAuthenticationParam) MarshalJSON() (data []byte, err error) {
	type shadow PushNotificationConfigAuthenticationParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *PushNotificationConfigAuthenticationParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents a single, stateful operation or conversation between a client and an
// agent.
type Task struct {
	// A unique identifier (e.g. UUID) for the task, generated by the server for a new
	// task.
	ID string `json:"id,required"`
	// A server-generated unique identifier (e.g. UUID) for maintaining context across
	// multiple related tasks or interactions.
	ContextID string `json:"contextId,required"`
	// The type of this object, used as a discriminator. Always 'task' for a Task.
	Kind constant.Task `json:"kind,required"`
	// The current status of the task, including its state and a descriptive message.
	Status TaskStatus `json:"status,required"`
	// A collection of artifacts generated by the agent during the execution of the
	// task.
	Artifacts []Artifact `json:"artifacts"`
	// An array of messages exchanged during the task, representing the conversation
	// history.
	History []Message `json:"history"`
	// Optional metadata for extensions. The key is an extension-specific identifier.
	Metadata map[string]any `json:"metadata"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		ID          respjson.Field
		ContextID   respjson.Field
		Kind        respjson.Field
		Status      respjson.Field
		Artifacts   respjson.Field
		History     respjson.Field
		Metadata    respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r Task) RawJSON() string { return r.JSON.raw }
func (r *Task) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Defines parameters containing a task ID, used for simple task operations.
//
// The property ID is required.
type TaskIDParams struct {
	// The unique identifier (e.g. UUID) of the task.
	ID string `json:"id,required"`
	// Optional metadata associated with the request.
	Metadata map[string]any `json:"metadata,omitzero"`
	paramObj
}

func (r TaskIDParams) MarshalJSON() (data []byte, err error) {
	type shadow TaskIDParams
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *TaskIDParams) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// A container associating a push notification configuration with a specific task.
type TaskPushNotificationConfig struct {
	// The push notification configuration for this task.
	PushNotificationConfig PushNotificationConfig `json:"pushNotificationConfig,required"`
	// The unique identifier (e.g. UUID) of the task.
	TaskID string `json:"taskId,required"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		PushNotificationConfig respjson.Field
		TaskID                 respjson.Field
		ExtraFields            map[string]respjson.Field
		raw                    string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r TaskPushNotificationConfig) RawJSON() string { return r.JSON.raw }
func (r *TaskPushNotificationConfig) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// ToParam converts this TaskPushNotificationConfig to a
// TaskPushNotificationConfigParam.
//
// Warning: the fields of the param type will not be present. ToParam should only
// be used at the last possible moment before sending a request. Test for this with
// TaskPushNotificationConfigParam.Overrides()
func (r TaskPushNotificationConfig) ToParam() TaskPushNotificationConfigParam {
	return param.Override[TaskPushNotificationConfigParam](json.RawMessage(r.RawJSON()))
}

// A container associating a push notification configuration with a specific task.
//
// The properties PushNotificationConfig, TaskID are required.
type TaskPushNotificationConfigParam struct {
	// The push notification configuration for this task.
	PushNotificationConfig PushNotificationConfigParam `json:"pushNotificationConfig,omitzero,required"`
	// The unique identifier (e.g. UUID) of the task.
	TaskID string `json:"taskId,required"`
	paramObj
}

func (r TaskPushNotificationConfigParam) MarshalJSON() (data []byte, err error) {
	type shadow TaskPushNotificationConfigParam
	return param.MarshalObject(r, (*shadow)(&r))
}
func (r *TaskPushNotificationConfigParam) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// Represents the status of a task at a specific point in time.
type TaskStatus struct {
	// The current state of the task's lifecycle.
	//
	// Any of "submitted", "working", "input-required", "completed", "canceled",
	// "failed", "rejected", "auth-required", "unknown".
	State TaskStatusState `json:"state,required"`
	// An optional, human-readable message providing more details about the current
	// status.
	Message Message `json:"message"`
	// An ISO 8601 datetime string indicating when this status was recorded.
	Timestamp string `json:"timestamp"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		State       respjson.Field
		Message     respjson.Field
		Timestamp   respjson.Field
		ExtraFields map[string]respjson.Field
		raw         string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r TaskStatus) RawJSON() string { return r.JSON.raw }
func (r *TaskStatus) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

// The current state of the task's lifecycle.
type TaskStatusState string

const (
	TaskStatusStateSubmitted     TaskStatusState = "submitted"
	TaskStatusStateWorking       TaskStatusState = "working"
	TaskStatusStateInputRequired TaskStatusState = "input-required"
	TaskStatusStateCompleted     TaskStatusState = "completed"
	TaskStatusStateCanceled      TaskStatusState = "canceled"
	TaskStatusStateFailed        TaskStatusState = "failed"
	TaskStatusStateRejected      TaskStatusState = "rejected"
	TaskStatusStateAuthRequired  TaskStatusState = "auth-required"
	TaskStatusStateUnknown       TaskStatusState = "unknown"
)
